{"version":3,"sources":["../src/view.js"],"names":["init","cmid","ltiHostname","window","console","log","addEventListener","onMessage","bind","event","origin","URL","hostname","data","type","reload","updateUUID","uuid","shouldReload","Ajax","call","methodname","args","done","fail","err","error","iframe","document","getElementById","parentNode","removeChild","Notification","alert","Str","get_string","then","modal","getRoot","on","ModalEvents","hidden","location"],"mappings":"4eAMA,OACA,OACA,OACA,O,gmBAIoB,QAAPA,CAAAA,IAAO,CAACC,CAAD,CAAOC,CAAP,CAAuB,CACvCC,MAAM,CAACC,OAAP,CAAeC,GAAf,kEACAF,MAAM,CAACG,gBAAP,CAAwB,SAAxB,CAAmCC,CAAS,CAACC,IAAV,QAAqBP,CAArB,CAA2BC,CAA3B,CAAnC,CACH,C,CAED,QAASK,CAAAA,CAAT,CAAmBN,CAAnB,CAAyBC,CAAzB,CAAsCO,CAAtC,CAA6C,CACzC,GAAMC,CAAAA,CAAM,CAAG,GAAIC,CAAAA,GAAJ,CAAQF,CAAK,CAACC,MAAd,EAAsBE,QAArC,CAEA,GAAIF,CAAM,EAAIR,CAAd,CAA2B,CACvBC,MAAM,CAACC,OAAP,CAAeC,GAAf,+DAAsDI,CAAK,CAACC,MAA5D,2BAAoFR,CAApF,gBACA,MACH,CAED,GAAIW,CAAAA,CAAI,CAAGJ,CAAK,CAACI,IAAjB,CACA,GAAiB,QAAb,EAAAA,CAAI,CAACC,IAAT,CAA2B,CACvBX,MAAM,CAACC,OAAP,CAAeC,GAAf,+CACAU,CAAM,EACT,CAHD,IAGO,CACHC,CAAU,CAACf,CAAD,CAAOY,CAAP,CACb,CACJ,CAED,QAASG,CAAAA,CAAT,CAAoBf,CAApB,CAA0BY,CAA1B,CAAgC,IACxBI,CAAAA,CAAI,CAAG,EADiB,CAExBC,CAAY,GAFY,CAG5B,GAAiB,QAAb,EAAAL,CAAI,CAACC,IAAT,CAA2B,CACvBG,CAAI,CAAGJ,CAAI,CAACI,IAAZ,CACAd,MAAM,CAACC,OAAP,CAAeC,GAAf,sDAA6CY,CAA7C,sBAA8DhB,CAA9D,EACH,CAHD,IAGO,IAAiB,OAAb,EAAAY,CAAI,CAACC,IAAT,CAA0B,CAC7BX,MAAM,CAACC,OAAP,CAAeC,GAAf,wDAA+CJ,CAA/C,GACAiB,CAAY,GACf,CAHM,IAGA,CACH,MACH,CAEDC,UAAKC,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,yBADL,CAEPC,IAAI,CAAE,CAACrB,IAAI,CAAEA,CAAP,CAAagB,IAAI,CAAEA,CAAnB,CAFC,CAGPM,IAAI,CAAE,eAAM,CACR,GAAIL,CAAJ,CAAkB,CACdH,CAAM,EACT,CACJ,CAPM,CAQPS,IAAI,CAAE,cAACC,CAAD,CAAS,CACXtB,MAAM,CAACC,OAAP,CAAesB,KAAf,CAAqBD,CAArB,EAGA,GAAME,CAAAA,CAAM,CAAGC,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAAf,CACAF,CAAM,CAACG,UAAP,CAAkBC,WAAlB,CAA8BJ,CAA9B,EAGAK,UAAaC,KAAb,CACIC,CAAG,CAACC,UAAJ,CAAe,mBAAf,CAAoC,YAApC,CADJ,CAEID,CAAG,CAACC,UAAJ,CAAe,qBAAf,CAAsC,YAAtC,CAFJ,CAGID,CAAG,CAACC,UAAJ,CAAe,oBAAf,CAAqC,YAArC,CAHJ,EAIKC,IAJL,CAIU,SAAUC,CAAV,CAAiB,CACnBA,CAAK,CAACC,OAAN,GAAgBC,EAAhB,CAAmBC,UAAYC,MAA/B,CAAuC,UAAY,CAC/CvB,CAAY,EACf,CAFD,CAGH,CARL,CASH,CAzBM,CAAD,CAAV,CA2BH,CAED,QAASH,CAAAA,CAAT,EAAkB,CACdZ,MAAM,CAACuC,QAAP,CAAgB3B,MAAhB,IACH,C","sourcesContent":["/**\n * @package     mod_daddyvideo\n * @copyright   2021 TxC2 <info@txc2.eu>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Str from 'core/str';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport ModalEvents from 'core/modal_events';\n\nconst PREFIX = 'mod_daddyvideo:';\n\nexport const init = (cmid, ltiHostname) => {\n    window.console.log(`${PREFIX} Registering message listener...`);\n    window.addEventListener('message', onMessage.bind(this, cmid, ltiHostname));\n};\n\nfunction onMessage(cmid, ltiHostname, event) {\n    const origin = new URL(event.origin).hostname;\n\n    if (origin != ltiHostname) {\n        window.console.log(`${PREFIX} Received message from ${event.origin} but expecting ${ltiHostname}, ignoring`);\n        return;\n    }\n\n    let data = event.data;\n    if (data.type == 'reload') {\n        window.console.log(`${PREFIX} Reloading...`);\n        reload();\n    } else {\n        updateUUID(cmid, data);\n    }\n}\n\nfunction updateUUID(cmid, data) {\n    let uuid = '';\n    let shouldReload = false;\n    if (data.type == 'update') {\n        uuid = data.uuid;\n        window.console.log(`${PREFIX} Setting UUID ${uuid} for cmid ${cmid}`);\n    } else if (data.type == 'reset') {\n        window.console.log(`${PREFIX} Resetting cmid ${cmid}`);\n        shouldReload = true;\n    } else {\n        return;\n    }\n\n    Ajax.call([{\n        methodname: \"mod_daddyvideo_set_uuid\",\n        args: {cmid: cmid, uuid: uuid},\n        done: () => {\n            if (shouldReload) {\n                reload();\n            }\n        },\n        fail: (err) => {\n            window.console.error(err);\n\n            // Remove iframe to stop upload\n            const iframe = document.getElementById('daddyvideo-embed');\n            iframe.parentNode.removeChild(iframe);\n\n            // Alert the user and refresh on dismiss\n            Notification.alert(\n                Str.get_string('error_popup_title', 'daddyvideo'),\n                Str.get_string('error_popup_message', 'daddyvideo'),\n                Str.get_string('error_popup_button', 'daddyvideo'))\n                .then(function (modal) {\n                    modal.getRoot().on(ModalEvents.hidden, function () {\n                        shouldReload();\n                    });\n                });\n        }\n    }]);\n}\n\nfunction reload() {\n    window.location.reload(true);\n}\n"],"file":"view.min.js"}